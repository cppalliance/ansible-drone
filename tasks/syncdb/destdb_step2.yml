---
- name: Print backup file name
  ansible.builtin.debug:
    var: drone_dbsync_backupfilename

- name: Restore database
  become: true
  become_user: "{{ drone_dbsync_backup_user }}"
  ansible.builtin.shell: |
    set -xe
    # One possibility to configured permissions
    # psql -d {{ drone_dbsync_destdb }} -c 'ALTER SCHEMA public OWNER TO {{ drone_dbsync_destdb_role }}'
    # Another possibility
    # (a small detail is that this default should already be in place "COMMENT ON SCHEMA public IS 'standard public schema';")
    # psql -d {{ drone_dbsync_destdb }} -c 'GRANT ALL ON SCHEMA public to public'
    # psql -d {{ drone_dbsync_destdb }} -c 'GRANT ALL ON SCHEMA public to {{ drone_dbsync_destdb_role }}'
    pg_restore --clean --if-exists -d {{ drone_dbsync_destdb }} "{{ drone_dbsync_dest_tmp_dir }}/{{ drone_dbsync_backupfilename }}"
  args:
    chdir: "{{ drone_dbsync_dest_tmp_dir }}"
    executable: /bin/bash
  register: command_output
  changed_when: false

- name: Output of restore database
  ansible.builtin.debug:
    msg:
      - "{{ command_output.stdout }}"
      - "{{ command_output.stderr }}"

# When testing, it's interesting to keep this
# - name: Cleanup backup file from dest
#   ansible.builtin.file:
#     path: "{{ drone_dbsync_dest_tmp_dir }}/{{ drone_dbsync_backupfilename }}"
#     state: absent
